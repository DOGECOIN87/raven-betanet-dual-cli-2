name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.21'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${{ github.ref_name }}"
          # Check if it's a pre-release (contains alpha, beta, rc)
          if echo "$VERSION" | grep -qE "(alpha|beta|rc)"; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        fi
        
        # Validate version format
        if ! echo "$VERSION" | grep -qE "^v[0-9]+\.[0-9]+\.[0-9]+"; then
          echo "ERROR: Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "Release version: $VERSION"
        echo "Is pre-release: $IS_PRERELEASE"
        
    - name: Check if tag exists
      run: |
        if git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
          echo "Tag ${{ steps.version.outputs.version }} already exists"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ERROR: Cannot create release for existing tag"
            exit 1
          fi
        else
          echo "Tag ${{ steps.version.outputs.version }} is new"
        fi

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run all tests
      run: |
        echo "Running unit tests..."
        go test -v -race -coverprofile=coverage.out ./...
        
        echo "Running integration tests..."
        go test -v -tags=integration ./tests/integration/...
        
    - name: Generate coverage report
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        
        # Fail if coverage is below threshold
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "ERROR: Coverage $COVERAGE% is below minimum threshold of 70%"
          exit 1
        fi
        
    - name: Run security scan
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...
        
    - name: Run vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build cross-platform binaries
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        COMMIT="${{ github.sha }}"
        DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        echo "Building release artifacts for version: $VERSION"
        
        # Use Makefile for consistent builds
        make clean-all
        VERSION="$VERSION" COMMIT="$COMMIT" DATE="$DATE" make release
        
    - name: Verify artifacts
      run: |
        echo "Verifying release artifacts..."
        ls -la dist/
        
        # Verify checksums
        cd dist
        sha256sum -c checksums.txt
        
        # Test a few binaries
        ./raven-linter-${{ needs.validate-release.outputs.version }}-linux-amd64 --version
        ./chrome-utls-gen-${{ needs.validate-release.outputs.version }}-linux-amd64 --version
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: dist/
        retention-days: 30

  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag -l "v*.*.*" | grep -v "$VERSION" | sort -V | tail -1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using initial commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "Generating release notes from $PREVIOUS_TAG to $VERSION"
        
        # Generate release notes
        cat > release_notes.md << EOF
        # Release $VERSION
        
        ## What's Changed
        
        EOF
        
        # Get commits since last tag
        git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" >> release_notes.md
        
        # Add sections for different types of changes
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Features" >> release_notes.md
        git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | grep -i "feat\|feature" >> release_notes.md || echo "- No new features in this release" >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## Bug Fixes" >> release_notes.md
        git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | grep -i "fix\|bug" >> release_notes.md || echo "- No bug fixes in this release" >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## Improvements" >> release_notes.md
        git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | grep -i "improve\|enhance\|perf" >> release_notes.md || echo "- No improvements in this release" >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## Documentation" >> release_notes.md
        git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | grep -i "doc\|readme" >> release_notes.md || echo "- No documentation changes in this release" >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## Dependencies" >> release_notes.md
        git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | grep -i "dep\|bump\|update.*version" >> release_notes.md || echo "- No dependency updates in this release" >> release_notes.md
        
        # Add installation instructions
        cat >> release_notes.md << EOF
        
        ## Installation
        
        ### Download Binaries
        
        Download the appropriate binary for your platform from the assets below:
        
        - **Linux (x64)**: \`raven-linter-$VERSION-linux-amd64\`, \`chrome-utls-gen-$VERSION-linux-amd64\`
        - **Linux (ARM64)**: \`raven-linter-$VERSION-linux-arm64\`, \`chrome-utls-gen-$VERSION-linux-arm64\`
        - **macOS (x64)**: \`raven-linter-$VERSION-darwin-amd64\`, \`chrome-utls-gen-$VERSION-darwin-amd64\`
        - **macOS (ARM64)**: \`raven-linter-$VERSION-darwin-arm64\`, \`chrome-utls-gen-$VERSION-darwin-arm64\`
        - **Windows (x64)**: \`raven-linter-$VERSION-windows-amd64.exe\`, \`chrome-utls-gen-$VERSION-windows-amd64.exe\`
        
        ### Verify Downloads
        
        All binaries include SHA256 checksums in \`checksums.txt\`. Verify your download:
        
        \`\`\`bash
        # Linux/macOS
        sha256sum -c checksums.txt
        
        # Windows (PowerShell)
        Get-FileHash -Algorithm SHA256 <binary-name>
        \`\`\`
        
        ### Quick Start
        
        \`\`\`bash
        # Make binary executable (Linux/macOS)
        chmod +x raven-linter-$VERSION-linux-amd64
        chmod +x chrome-utls-gen-$VERSION-linux-amd64
        
        # Check version
        ./raven-linter-$VERSION-linux-amd64 --version
        ./chrome-utls-gen-$VERSION-linux-amd64 --version
        
        # Run compliance check
        ./raven-linter-$VERSION-linux-amd64 check <binary-path>
        
        # Generate Chrome ClientHello
        ./chrome-utls-gen-$VERSION-linux-amd64 generate --output clienthello.bin
        \`\`\`
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION
        EOF
        
        # Output for GitHub Actions
        {
          echo "release_notes<<EOF"
          cat release_notes.md
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts, generate-release-notes]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: ${{ needs.validate-release.outputs.version }}
        body: ${{ needs.generate-release-notes.outputs.release_notes }}
        draft: ${{ github.event.inputs.draft || false }}
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        
    - name: Upload Release Assets
      run: |
        # Install GitHub CLI if not available
        if ! command -v gh &> /dev/null; then
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
        fi
        
        # Upload all artifacts
        cd dist
        for file in *; do
          echo "Uploading $file..."
          gh release upload ${{ needs.validate-release.outputs.version }} "$file" --clobber
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-release-artifacts:
    name: Validate Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Download and test artifacts
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Determine platform-specific binary names
        case "${{ matrix.os }}" in
          ubuntu-latest)
            RAVEN_BINARY="raven-linter-$VERSION-linux-amd64"
            CHROME_BINARY="chrome-utls-gen-$VERSION-linux-amd64"
            ;;
          macos-latest)
            RAVEN_BINARY="raven-linter-$VERSION-darwin-amd64"
            CHROME_BINARY="chrome-utls-gen-$VERSION-darwin-amd64"
            ;;
          windows-latest)
            RAVEN_BINARY="raven-linter-$VERSION-windows-amd64.exe"
            CHROME_BINARY="chrome-utls-gen-$VERSION-windows-amd64.exe"
            ;;
        esac
        
        # Download binaries from release
        curl -L -o "$RAVEN_BINARY" "https://github.com/${{ github.repository }}/releases/download/$VERSION/$RAVEN_BINARY"
        curl -L -o "$CHROME_BINARY" "https://github.com/${{ github.repository }}/releases/download/$VERSION/$CHROME_BINARY"
        
        # Make executable on Unix systems
        if [ "${{ matrix.os }}" != "windows-latest" ]; then
          chmod +x "$RAVEN_BINARY"
          chmod +x "$CHROME_BINARY"
        fi
        
        # Test version commands
        echo "Testing raven-linter version..."
        ./"$RAVEN_BINARY" --version
        
        echo "Testing chrome-utls-gen version..."
        ./"$CHROME_BINARY" --version
        
        # Test help commands
        echo "Testing help commands..."
        ./"$RAVEN_BINARY" --help
        ./"$CHROME_BINARY" --help
        
        echo "✅ Release artifacts validated successfully on ${{ matrix.os }}"

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update README with latest version
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Update version references in README
        if [ -f "README.md" ]; then
          # Update download links
          sed -i "s|releases/download/v[0-9]\+\.[0-9]\+\.[0-9]\+|releases/download/$VERSION|g" README.md
          
          # Update version badges
          sed -i "s|/v[0-9]\+\.[0-9]\+\.[0-9]\+|/$VERSION|g" README.md
          
          # Commit changes if any
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "docs: update README for release $VERSION"
            git push origin main
            echo "✅ README updated with version $VERSION"
          else
            echo "ℹ️ No README updates needed"
          fi
        fi

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, validate-release-artifacts]
    if: failure()
    
    steps:
    - name: Delete failed release
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Install GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
        
        # Delete release if it was created
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "Deleting failed release $VERSION..."
          gh release delete "$VERSION" --yes
          echo "✅ Failed release deleted"
        fi
        
        # Delete tag if it was created by workflow_dispatch
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION"; then
            echo "Deleting tag $VERSION..."
            git push --delete origin "$VERSION" || echo "Tag deletion failed or tag doesn't exist"
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create failure summary
      run: |
        echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The release workflow for version ${{ needs.validate-release.outputs.version }} has failed." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Failed Jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- Validate Release: ${{ needs.validate-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Create GitHub Release: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Validate Release Artifacts: ${{ needs.validate-release-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Rollback Actions:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Failed release deleted (if created)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Failed tag deleted (if created by workflow)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the failed job logs" >> $GITHUB_STEP_SUMMARY
        echo "2. Fix any issues identified" >> $GITHUB_STEP_SUMMARY
        echo "3. Re-run the release workflow" >> $GITHUB_STEP_SUMMARY

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, validate-release-artifacts, update-documentation]
    if: success()
    
    steps:
    - name: Create success summary
      run: |
        echo "## ✅ Release Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Release ${{ needs.validate-release.outputs.version }} has been successfully created and validated!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-release**: ${{ needs.validate-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Cross-platform binaries built" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Checksums generated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Release notes generated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Artifacts validated on multiple platforms" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation updated" >> $GITHUB_STEP_SUMMARY